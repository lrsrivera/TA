Task Manager Project
This project is a simple task management system that features privacy settings and role-based access control (RBAC) along with some performance optimizations.

Access Diagrams and Postman results here: https://docs.google.com/spreadsheets/d/1KkPTgwZm0UHt0a7gaKukNsdX87D20XqtG-6BQ37DcHQ/edit?usp=sharing


Privacy Settings and Role-Based Access Control (RBAC)
We implemented privacy and RBAC features in several parts of the project:

Permissions:

task_manager/permissions.py includes our custom permission classes to enforce who can access or modify data.

Data Models:

task_manager/models.py defines our data models, including the user roles that determine access rights.

Views:

task_manager/views.py has the logic to check permissions and enforce access control on each endpoint.

Performance Optimization
To make the app run smoother, we added some performance enhancements:

Caching with Singleton Pattern:

task_manager/singletons/config_manager.py uses a singleton to cache configuration settings so that we donâ€™t hit the database every time.

task_manager/test_config_manager.py contains tests to ensure our caching works correctly.

Pagination:

In task_manager/views.py, list views are paginated to avoid loading too many items at once.

The default page size is configurable via our ConfigManager, and you can adjust pagination settings through API requests.

Serialization:

task_manager/serializers.py is used to serialize data efficiently for API responses.

Pagination Details
List endpoints use pagination to improve performance.

The default page size is set in the ConfigManager, but you can change it with query parameters.

Caching Details
Configuration settings are cached using the singleton pattern.

This reduces the number of database queries for frequently used settings.

The caching is thread-safe, ensuring consistent access across the application.
